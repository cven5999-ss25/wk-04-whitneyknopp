---
title: "Live Coding - Data transformation"
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  warning: false
---

```{r}

library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)

```

# Data import

-   read.csv is from base R

-   read_csv is from readr package, more user-friendly

```{r}

sanitation <- read_csv(here::here("data/jmp-washdata-indicators-safely-managed-sml.csv"))

```

## Explore data

The original source of this data is from [washdata.org](https://washdata.org/) WHO/UNICEF Joint Monitoring Programme for Water Supply and Sanitation. Data was pre-processed to prepare data in a consisent format follows tidy data principles.

Income groups are derived from the [World Bank Country and Lending Groups data](https://datahelpdesk.worldbank.org/knowledgebase/articles/906519-world-bank-country-and-lending-groups).

All code for pre-processing and the imported data can be accessed from the [larnsce/washr GitHub repository](https://github.com/larnsce/washr).

```{r}

# this shows a focus on the columns
glimpse(sanitation)

# this shows the first 6 rows
head(sanitation)

# this sohws the last 6 rows
tail(sanitation)

```

# Data wrangling with dplyr

The `dplyr` R Package aims to provide a function for each basic verb of data manipulation. These verbs can be organised into three categories based on the component of the dataset that they work with:

-   Rows
-   Columns
-   Groups of rows

## Rows

### dplyr::filter()

The function `filter()` chooses rows based on column values. To use filtering effectively, you have to know how to select the observations that you want using the comparison operators. R provides the standard suite: \>, \>=, \<, \<=, != (not equal), and == (equal).

```{r}

# this filters for only the residence that is national
sanitation |> 
  filter(residence == "national")

# you can combine filters with a comma
sanitation |> 
  filter(residence == "national", iso3 == "SEN")

# filter for multiple entries of the same category, use the vertical pipe ( | )for OR
sanitation |> 
  filter(iso3 == "UGA" | iso3 == "GHA" | iso3 == "USA")

# filter for large numbers of "OR" entries, cal also define the vector outside
# the function and reference it here
sanitation |> 
  filter(iso3 %in% c("UGA", "GHA", "USA"))

countries <- c("UGA", "GHA", "USA")
sanitation |> 
  filter(iso3 %in% countries)

# filter for NOT equal ( != )
sanitation |> 
  filter(residence != "national")

# filter numerical values, in this case you don't need quotations
sanitation |> 
  filter(percent > 80)


```

#### Your turn

1.  Use the `filter()` function to create a subset from the `sanitation` data object containing national estimates for the year 2020

2.  Store the result as a new object in your environment with the name `sanitation_national_2020`

```{r}

sanitation_national_2020 <- sanitation |> 
  filter(residence == "national", year == 2020) |> 
  filter(!is.na(income_id)) # this line removes the observations that are "NA"
```

### dplyr::arrange()

The function `arrange()` changes the order of the rows.

```{r}

# order in ascending order by percent
sanitation |> 
  arrange(percent)

# order by descending
sanitation |> 
  arrage(desc(percent))

```

## Columns

### dplyr::select()

The function `select()` picks variables based on their names.

Useful when working with large data sets, only select the ones you want to include

You don't put quotations with `select()` because it is selecting column entities of a data set

```{r}

santiation |> 
  select(name, iso3, percent, year)

# you can use a " - " sign to remove a column
# a " : " operator selects everything in between
sanitation |> 
  select(name:percent, -year)

# helpper function "starts_with()"
sanitation |> 
  select(name, starts_with("p"))
```

Helpers select variables by matching patterns in their names:

-   `starts_with()`: Starts with a prefix.
-   `ends_with()`: Ends with a suffix.
-   `contains()`: Contains a literal string.

Learn more: https://dplyr.tidyverse.org/reference/select.html

### dplyr::rename()

The function `rename()` changes the name of columns.

```{r}

sanitation |> 
  rename(country_name = name)

```

### dplyr::relocate()

The function `relocate()` changes the order of the columns.

```{r}

# just using "relocate()" moves the column to the beginning
sanitation |> 
  relocate(income_id)

# specify where it will be moved,
# needs a "full stop" (.) before the "before/after" argument
sanitation |> 
  relocate(income_id, .after = year)
```

### dplyr::mutate()

The function `mutate()` changes the values of columns and creates new columns.

Creates a new column of data or overrides values of an existing column

```{r}

# new column "people_access", with a formula to calculate the values
sanitation |> 
  mutate(people_access = pop * percent / 100)


```

#### Factors

Categorical variables that have a natural order (ordinal variables) need to be transformed into variable of type factor. They are stored as variables of type character, of which the order is always alphabetical.

```{r}
#| eval: false

# What is with the order?
# Order is the income_id, with factors: LIC, LMC, UMC, HIC

ggplot(data = sanitation_national_2020,
       mapping = aes(x = income_id, 
                     y = percent, 
                     fill = income_id)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.1)

# we want to change the order of income_id, which is currently alphabetical, but more
# informative to have different levels

# define a vector with the levels
income_levels <- c("LIC", "LMC", "UMC", "HIC")

# add a new column of data with the factor function
sanitation_national_2020_fct <- sanitation_national_2020 |> 
  mutate(income_id_fct = factor(income_id, levels = income_levels))


# Let's check again with the new data

 ggplot(data = sanitation_national_2020_fct,
        mapping = aes(x = income_id_fct, 
                      y = percent, 
                      fill = income_id)) +
   geom_boxplot(outlier.shape = NA) +
   geom_jitter(width = 0.1)


```

## Groups of rows

### dplyr::summarise()

`summarize()` on its own doesn't do anything, you have to add an argument

```{r}

sanitation_national_2020_fct |> 
  summarize(avg_percent = mean(percent, na.rm = TRUE), # na.rm inside mean() removes                                                        the NA values from calculation,                                                       not from the data set
            countries_count = n()) # counts the number of countries, this is not accurate because many less countries were removed prior to this calculation

# better option for removing NAs, do it BEFORE mean calculation
sanitation_national_2020_fct |> 
  filter(!is.na(percent)) |> 
  summarize(avg_percent = mean(percent),
            std_dev = sd(percent),
            countires_count = n())

# combining group_by() and summarize() is very powerful-- 
# you can get summary stats for based on the grouping 
sanitation_national_2020_fct |> 
  filter(!is.na(percent)) |> 
  group_by(region) |> 
  summarize(avg_percent = mean(percent),
            std_dev = sd(percent),
            countries_count = n())


```

#### Your turn

1.  Starting with `sanitation_national_2020_fct`, use the `mutate()` function to add a new column with the number of people with access to safely managed sanitation in each country. Name the column people_access (**Tipp: Check out how we did this in dplyr::mutate() section of this document.**)

2.  Use the pipe operator to add another line of code which adds the `drop_na()` function to remove all NAs from the data

3.  Use the pipe operator to add another line of code which adds the `group_by()` function to group the data by region.

4.  Use the pipe operator to add another line of code which adds the `summarise()` to create a summary table that contains the sum of the people_access column (call this people_access) and the sum of the pop column (call this pop) for each region.

5.  Use the pipe operator to add another line of code which adds the `mutate()` function to add a new column with the percentage of people with access to safely managed sanitation in each region. Name the new column percent.

```{r}


```
