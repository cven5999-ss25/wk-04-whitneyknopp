---
title: "Live Coding - Data transformation"
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  warning: false
---

```{r}

library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)
library(here)

```

# Data import

```{r}

sanitation <- read_csv(here("data/jmp-washdata-indicators-safely-managed-sml.csv"))

```

## Explore data

The original source of this data is from [washdata.org](https://washdata.org/) WHO/UNICEF Joint Monitoring Programme for Water Supply and Sanitation. Data was pre-processed to prepare data in a consisent format follows tidy data principles.

Income groups are derived from the [World Bank Country and Lending Groups data](https://datahelpdesk.worldbank.org/knowledgebase/articles/906519-world-bank-country-and-lending-groups).

All code for pre-processing and the imported data can be accessed from the [larnsce/washr GitHub repository](https://github.com/larnsce/washr).

```{r}

glimpse(sanitation)
sanitation

```

# Data wrangling with dplyr

The `dplyr` R Package aims to provide a function for each basic verb of data manipulation. These verbs can be organised into three categories based on the component of the dataset that they work with:

-   Rows
-   Columns
-   Groups of rows

## Rows

### dplyr::filter()

The function `filter()` chooses rows based on column values. To use filtering effectively, you have to know how to select the observations that you want using the comparison operators. R provides the standard suite: \>, \>=, \<, \<=, != (not equal), and == (equal).

```{r}

sanitation |> 
  filter(residence == "national")

sanitation |> 
  filter(residence == "national", iso3 == "SEN") 

sanitation |> 
  filter(iso3 == "UGA" | iso3 == "GHA" | iso3 == "USA")

sanitation |> 
  filter(iso3 %in% c("UGA", "GHA", "USA"))

sanitation |> 
  filter(residence != "national")

sanitation |> 
  filter(percent > 80)

sanitation |> 
  filter(percent < 5)

```

#### Your turn

1.  Use the `filter()` function to create a subset from the `sanitation` data object containing national estimates for the year 2020

2.  Store the result as a new object in your environment with the name `sanitation_national_2020`

```{r}

sanitation_national_2020 <- sanitation |> 
  filter(residence == "national", year == 2020)

# What is in the variables?

sanitation |> 
  count(residence)

```

### dplyr::arrange()

The function `arrange()` changes the order of the rows.

```{r}

sanitation_national_2020 |> 
  arrange(percent)

sanitation_national_2020 |> 
  arrange(desc(percent))

```

## Columns

### dplyr::select()

The function `select()` picks variables based on their names.

```{r}

sanitation_national_2020 |> 
  select(name, iso3, percent, pop)

sanitation_national_2020 |> 
  select(name:percent, -year)

sanitation_national_2020 |> 
  select(name:percent, -year, starts_with("p"))

```

Helpers select variables by matching patterns in their names:

-   `starts_with()`: Starts with a prefix.
-   `ends_with()`: Ends with a suffix.
-   `contains()`: Contains a literal string.

Learn more: https://dplyr.tidyverse.org/reference/select.html

### dplyr::rename()

The function `rename()` changes the name of columns.

```{r}

sanitation_national_2020 |> 
  rename(country_name = name)

```

### dplyr::relocate()

The function `relocate()` changes the order of the columns.

```{r}

sanitation_national_2020 |> 
  relocate(income_id)

sanitation_national_2020 |> 
  relocate(income_id, .after = year)

sanitation_national_2020 |> 
  relocate(income_id, .before = percent)

sanitation_national_2020 |> 
  relocate(residence:income_id, .before = percent)

```

### dplyr::mutate()

The function `mutate()` changes the values of columns and creates new columns.

```{r}

sanitation_national_2020 %>% 
  mutate(people_access = pop * percent / 100) 

```

#### Factors

Categorical variables that have a natural order (ordinal variables) need to be transformed into variable of type factor. They are stored as variables of type character, of which the order is always alphabetical.

```{r}


ggplot(data = sanitation_national_2020,
       mapping = aes(x = income_id, 
                     y = percent, 
                     fill = income_id)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.1)


# What is with the order?

income_levels <- c("LIC", "LMC", "UMC", "HIC")

sanitation_national_2020_fct <- sanitation_national_2020 |> 
  mutate(income_id_fct = factor(income_id, levels = income_levels))

ggplot(data = sanitation_national_2020_fct,
       mapping = aes(x = income_id_fct, 
                     y = percent, 
                     fill = income_id)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.1)


```

## Groups of rows

### dplyr::summarise()

```{r}

# How does summarise work

sanitation_national_2020_fct %>% 
  summarise()

sanitation_national_2020_fct |> 
  summarise(percent = mean(percent, na.rm = TRUE),
            count = n())


sanitation_national_2020_fct |> 
  filter(!is.na(percent)) |> 
  summarise(percent = mean(percent),
            count = n())

# Summarise works well with group_by (frequency tables)

sanitation_national_2020_fct |> 
  group_by(region) |> 
  summarise(
    count = n()
  )

## Shortcut

sanitation_national_2020_fct |> 
  count(region)

## Factor order

sanitation_national_2020_fct |> 
  count(income_id_fct)

## Additional summary statistics

sanitation_national_2020_fct |>
  drop_na() |> 
  group_by(income_id_fct) |> 
  summarise(count = n(),
            mean = mean(percent),
            sd = sd(percent),
            median = median(percent)) 

```

#### Your turn

1.  Starting with `sanitation_national_2020_fct`, use the `mutate()` function to add a new column with the number of people with access to safely managed sanitation in each country. Name the column people_access (**Tipp: Check out how we did this in dplyr::mutate() section of this document.**)

2.  Use the pipe operator to add another line of code which adds the `drop_na()` function to remove all NAs from the data

3.  Use the pipe operator to add another line of code which adds the `group_by()` function to group the data by region.

4.  Use the pipe operator to add another line of code which adds the `summarise()` to create a summary table that contains the sum of the people_access column (call this people_access) and the sum of the pop column (call this pop) for each region.

5.  Use the pipe operator to add another line of code which adds the `mutate()` function to add a new column with the percentage of people with access to safely managed sanitation in each region. Name the new column percent.

```{r}

sanitation_national_2020_fct |> 
  mutate(people_access = pop * percent / 100) |> 
  drop_na() |>  
  group_by(region) |> 
  summarise(people_access = sum(people_access),
            pop = sum(pop)) |> 
  mutate(percent = people_access / pop * 100)

```
